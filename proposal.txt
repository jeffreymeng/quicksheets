TP2 Update
==================
The main update I have is a change in the parsing algorithm. The algorithm
is still mostly the same as described before, but I've added substantially
more detail below: My parser uses a recursive descent algorithm. The recursive descent parser
uses a set of functions, each representing a part of my spreadsheet language's
grammar.

In BNF form, my formula language's grammar roughly matches this:
```
expression      ::= term | term "+" expression | term "-" expression ;
term            ::= factor | factor "*" term | factor "/" term ;
factor          ::= base | base "^" exponent ;
function_arg    ::= range | expression
function        ::= function_name "(" [ { function_arg "," } function_arg ] ")"

base            ::= "(" expression ")" | number | function | string | reference | "+" base | "-" base ;
exponent        ::= base ;
```
function_name, number, function, string, and reference correspond to tokens from my lexer.

Other than that, each of the symbols (`expression`, `term`, `factor`, etc) is a function
in the recursive descent parser, although the functions may be named `getExpression()`, `getTerm()`, etc.

The expression gets a term, and then looks at the next token. If it's a plus or minus
operator, it adds a add/subtract node to the tree with the term as the left and the
next term as the right.

In order to get a term, however, the parser must get a factor, and then check if the next
token is multiple/divide and perform the correct operation just as with add/subtract.

In order to get a factor, the parser must get a base, and then check if the next token
is an exponentiation operator. In this way, before the tree gets to an add operator, it
will have handled all operators of higher precedence.

A base is typically just the next token, a number, string, or reference, although it can also be
a parenthesized expression (which then recursively goes back down to get a base inside the parentheses)
or a unary operator followed by a base.

Project Description
===================
The name of my term project is quicksheets. It's a spreadsheet application that
can handle reading & editing CSV files, as well as spreadsheet formulas. The app
will support a variety of formulas, and will have a pleasant formula editing
experience, including syntax highlighting.

Structural Plan
===================
My project will compose of three major parts:
1. Graphics, which is in charge of rendering the spreadsheet and handling input. It
    is also in charge of handling scrolling and displaying the spreadsheet with
    scrollbars if necessary.
2. Spreadsheet, which is in charge of storing the spreadsheet data and determining
    which cells need to have their value recomputed.
3. Formulas, which is in charge of parsing spreadsheet formulas and computing

Each part will have its files in it's own folder, so the folder structure will
look roughly like this (folders might contain additional files as needed):
/formula
        /lexer.py
        /parser.py
/spreadsheet
        /spreadsheet.py
        /cell.py
/graphics
        /graphics.py
main.py


Here are the detailed plans for each part:

Graphics
- takes in a Spreadsheet and renders it
- handles taking in user input, rendering the textarea to write formulas in, and
    copy/paste/drag. It also stores the currently selected cell(s).

Graphics Methods / Attributes:
- runApp(width=W, height=H) to run the app with a certain width W and height H

Spreadsheet
- class Spreadsheet
    - __init__() with path to csv file, or no path
    - data: a variable holding a 2d array of Cells
    - getRange(Range): generator that returns all the cells in a given range, in no
        particular order
- class Cell
    - holds the contents of a cell
    - string or number variable _computedValue: the value of the cell, which is the
        computed result of a formula if one exists. Otherwise, it's identical to _rawValue
    - string _rawValue: what the user typed in. This can be a formula.
    - function getComputedValue(): get the computed value of this cell
    - function getRawValue(): get the raw value of the cell
    - function setRawValue(): update the value of this cell. If it's updated with
        a formula, or a formula is updated, the cell will update the values of
        all cells that depend on this cell's value
    - function update(blacklist): re-computes the rawValue of the cell based on its
        dependencies, and updates all its dependents. This function should
        only be called by other cells. `blacklist` is an optional array
        of cells that cannot be updated again (because they've already been
        updated this cycle). If the cell requires another update, this
        will trigger a circular dependency error.
    - array of cells dependencies: reference to all Cells that this cell's
        formula references, or [] if it does not have a formula
    - array of cells dependents: reference to all Cells that rely on the
        computed value of this cell.
Formulas
  - class Token
  - class Lexer (in charge of taking a raw string and splitting it into tokens)
    - function lex(str) (generator that reads in a string containing a formula and yields Tokens)
    - function testLexer() (tests the lexer)
    - function printLexResult() prints the output from lex(str) for easy analysis
  - class Range()
- File: formula/parser.py
    - class Parser (takes in results from lexing and builds an AST)
    - class Node (holds some child nodes)
    - class SumNode, SubtractNode, RangeNode, NumberNode, etc. Each of these has
        an evaluate function that returns the value of the node and its child
        nodes, if any exist.

Algorithmic Plan
===================
I believe the most complex part of my project will be parsing and evaluating formulas,
and also determining which cells need to be updated as a result of editing a cell.

I plan to handle parsing and evaluating formulas in a few steps.
The first step, lexing, will consist of reading in the formula and splitting
it into its component tokens. For example, "3 * (8 + SUM(A1:B4))" would be split
into a list of tokens: number 3, operator *, control character (, number 8,
operator +, formula SUM, control character (, range A1:B4,
control character ), and control character )
The second step, parsing, will read in the resulting tokens from lexing and build
an abstract syntax tree. To do this I'll traverse through the tokens by looking
for the operator of highest precedence, and creating a Node with the child nodes
of the tokens to the left and right. Then, I'll repeat until there are no more operators.
The final step will recursively traverse the abstract syntax tree, evaluating
the value of each child Node of a given Node.

Version Control Plan
====================
I plan to back up my code using GitHub. See the image version-control.png.

