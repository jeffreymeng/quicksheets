Project Description
===================
The name of my term project is quicksheets. It's a spreadsheet application that
can handle reading & editing CSV files, as well as spreadsheet formulas. The app
will support a variety of formulas, and will have a pleasant formula editing
experience, including syntax highlighting.

Structural Plan
===================
My project will compose of three major parts:
1. Graphics, which is in charge of rendering the spreadsheet and handling input
2. Spreadsheet, which is in charge of storing the spreadsheet data and determining
    which cells need to have their value recomputed.
3. Formulas, which is in charge of parsing spreadsheet formulas and computing

Here are the detailed plans for each part:
Graphics
- takes in a Spreadsheet and renders it

Spreadsheet
- class Spreadsheet
    - init with path to csv file, or no path
    - holds Cells
- class Cell
    - holds the contents of a cell
    - string or number variable _computedValue: the value of the cell, which is the
        computed result of a formula if one exists. Otherwise, it's identical to _rawValue
    - string _rawValue: what the user typed in. This can be a formula.
    - function getComputedValue(): get the computed value of this cell
    - function getRawValue(): get the raw value of the cell
    - function setRawValue(): update the value of this cell. If it's updated with
        a formula, or a formula is updated, the cell will update the values of
        all cells that depend on this cell's value
    - function update(blacklist): re-computes the rawValue of the cell based on its
        dependencies, and updates all its dependents. This function should
        only be called by other cells. `blacklist` is an optional array
        of cells that cannot be updated again (because they've already been
        updated this cycle). If the cell requires another update, this
        will trigger a circular dependency error.
    - array of cells dependencies: reference to all Cells that this cell's
        formula references, or [] if it does not have a formula
    - array of cells dependents: reference to all Cells that rely on the
        computed value of this cell.
Formulas
- File: formula/lexer.py (in charge of taking a raw string and splitting it into tokens)
  - class Token
  - function lex(str) (generator that reads in a string containing a formula and yields Tokens)
  - function testLexer() (tests the lexer)
  - function printLexResult() prints the output from lex(str) for easy analysis

Algorithmic Plan
===================
I believe the most complex part of my project will be parsing and evaluating formulas,
and also determining which cells need to be updated as a result of editing a cell.

1. Parsing & Evaluating Formulas
I plan to handle parsing and evaluating formulas in a few steps.
The first step, lexing, will consist of reading in the formula and splitting
it into its component tokens. For example, "3 * (8 + SUM(A1:B4))" would be split
into a list of tokens: number 3, operator *, control character (, number 8,
operator +, formula SUM, control character (, range col1 A row1 1 col2 B row2 4,
control character ), and control character )
The second step, parsing, will read in the resulting tokens from lexing and

Version Control Plan
====================
I plan to back up my code using GitHub. See the image version-control.png.


### Scrolling
There will be a draggable scrollbar on the right and bottom, when necessary.
The scrollbar can be scrolled in very small (1px) increments, however
only when the scrollbar passes a certain threshold does the sheet actually scroll.
When the sheet scrolls, all cells will be essentially shifted by some number
of cells, such that cells are never cut off by the scroll. They are either
completely shown or completely hidden. This is how it works in google sheets
and excel too, I believe.